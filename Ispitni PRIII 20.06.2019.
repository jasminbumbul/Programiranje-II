#include<iostream>
#include<vector>
#include<string>
#include<exception>
#include<algorithm>
#include<regex>
#include<thread>
#include<mutex>
#include<chrono>
#include<fstream>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
****************************************************************************/

const char* nedozvoljena_operacija = "Nedozvoljena operacija";
const char* not_set = "NOT_SET";

enum Sortiranje { ASC, DESC };
enum Predmet { MATEMATIKA, FIZIKA, HEMIJA, GEOGRAFIJA, NOT_SET };
enum Razred { I = 1, II, III, IV };
const char* razred[4] = { "---","prvi","drugi,""treci","cetvrti" };
const char* predmet[4] = { "MATEMATIKA","FIZIKA","HEMIJA,""GEOGRAFIJA","NOT_SET" };
mutex m;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template <class T1, class T2, int max>
class Kolekcija {
	T1* _elementi1[max] = { nullptr };
	T2* _elementi2[max] = { nullptr };
	int _trenutnoElemenata;
	bool _dozvoliDupliranje;
	Sortiranje _sortiranje;
public:
	Kolekcija(Sortiranje sortiranje = ASC, bool dozvoliDupliranje = true) {
		_trenutnoElemenata = 0;
		_sortiranje = sortiranje;
		_dozvoliDupliranje = dozvoliDupliranje;
	}
	~Kolekcija() {
		for (size_t i = 0; i < _trenutnoElemenata; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
	}

	Kolekcija(const Kolekcija& obj)
	{
		_trenutnoElemenata = obj._trenutnoElemenata;
		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = new T1(*obj._elementi1[i]);
			_elementi2[i] = new T2(*obj._elementi2[i]);
		}
		_dozvoliDupliranje = obj._dozvoliDupliranje;
		_sortiranje = obj._sortiranje;
	}

	Kolekcija& operator=(const Kolekcija& obj)
	{
		if (this == &obj)
		{
			return *this;
		}

		for (size_t i = 0; i < _trenutnoElemenata; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
		_trenutnoElemenata = obj._trenutnoElemenata;

		for (size_t i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = new T1(*obj._elementi1[i]);
			_elementi2[i] = new T2(*obj._elementi2[i]);
		}
		_dozvoliDupliranje = obj._dozvoliDupliranje;
		_sortiranje = obj._sortiranje;
		return *this;
	}

	void AddElement(const T1& elem1, const T2& elem2) {
		if (_trenutnoElemenata < max)
		{
			if (!_dozvoliDupliranje)
			{
				for (size_t i = 0; i < _trenutnoElemenata; i++)
				{
					if (*_elementi1[i] == elem1 || *_elementi2[i] == elem2)
					{
						throw exception("Element vec postoji");
					}
				}
			}
			_elementi1[_trenutnoElemenata] = new T1(elem1);
			_elementi2[_trenutnoElemenata] = new T2(elem2);
			_trenutnoElemenata++;
			sort();
			return;
		}
		throw exception("Nema vise mjesta");
	}

	void sort() {
		if (_sortiranje == Sortiranje(0))
		{
			bool flag = true;
			while (flag)
			{
				flag = false;
				for (size_t i = 0; i < _trenutnoElemenata - 1; i++)
				{
					if (*_elementi1[i] > * _elementi1[i + 1])
					{
						swap(_elementi1[i], _elementi1[i + 1]);
						swap(_elementi2[i], _elementi2[i + 1]);
						flag = true;
					}
				}
			}
			return;
		}

		if (_sortiranje == Sortiranje(1))
		{
			int tempVelicina = _trenutnoElemenata;
			bool flag = true;
			while (flag)
			{
				flag = false;
				for (size_t i = 0; i < tempVelicina - 1; i++)
				{
					if (*_elementi1[i] < *_elementi1[i + 1])
					{
						swap(_elementi1[i], _elementi1[i + 1]);
						swap(_elementi2[i], _elementi2[i + 1]);
						flag = true;
					}
				}
			}
			return;
		}
	}


	int GetTrenutno() const { return _trenutnoElemenata; }
	int GetMax() const { return max; }

	T1& GetElement1(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception(nedozvoljena_operacija);
		return *_elementi1[lokacija];
	}
	T2& GetElement2(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception(nedozvoljena_operacija);
		return *_elementi2[lokacija];
	}
	void SetElement2(int lokacija, T2 ele2) {
		_elementi2[lokacija] = ele2;
	}
	friend ostream& operator<<(ostream & COUT, const Kolekcija & obj) {
		for (size_t i = 0; i < obj.GetTrenutno(); i++)
			COUT << obj.GetElement1(i) << " " << obj.GetElement2(i) << endl;
		return COUT;
	}
};

class Aktivnost {
	shared_ptr<Razred> _razred;
	string _opis;
	int _ocjena;//1-5
public:
	Aktivnost(Razred razred = I, int ocjena = 0, string opis = not_set) {
		_ocjena = ocjena;
		_opis = opis;
		_razred = make_shared<Razred>(razred);
	}
	int  GetOcjenu() const { return _ocjena; }
	string GetOpis() const { return _opis; }
	Razred GetRazred() const { return *_razred; }

	Aktivnost(const Aktivnost& obj)
	{
		_razred = obj._razred;
		_opis = obj._opis;
		_ocjena = obj._ocjena;
	}

	Aktivnost& operator=(const Aktivnost& obj)
	{
		_razred = obj._razred;
		_opis = obj._opis;
		_ocjena = obj._ocjena;

		return *this;
	}

	bool operator==(const Aktivnost& obj) {
		if (_opis == obj._opis)
		{
			return true;
		}
		return false;
	}

	friend ostream& operator<<(ostream& COUT, const Aktivnost& obj) {
		COUT << "Razred: " << razred[*obj._razred] << "  Ocjena:  " << obj._ocjena << "  Opis:  " << obj._opis << endl;
		return COUT;
	}
};

class Polaznik {
protected:
	char* _imePrezime;
	string _brojTelefona;

	//+387(6X)XXX - XXX ili + 387 6X XXX - XXX
	bool isValidanBroj(string telefon) {
		regex pravilo("\\+\\d{3}\\(?\\s?\\d{2}\\)?\\s?\\d{3}\\-?\\s?\\-\\s?\\d{3}");
		return regex_search(telefon, pravilo);
	}
public:
	Polaznik(string imePrezime, string brojTelefona) : _imePrezime(AlocirajNizKaraktera(imePrezime.c_str())) {
		_brojTelefona = isValidanBroj(brojTelefona) ? brojTelefona : not_set;
	}
	Polaznik(const Polaznik& obj)
	{
		_imePrezime = AlocirajNizKaraktera(obj._imePrezime);
		_brojTelefona = obj._brojTelefona;
	}

	Polaznik& operator=(const Polaznik& obj)
	{
		_imePrezime = AlocirajNizKaraktera(obj._imePrezime);
		_brojTelefona = obj._brojTelefona;
		return *this;
	}

	~Polaznik() { delete[] _imePrezime; }
	char* GetImePrezime() { return _imePrezime; }
	string GetTelefon() { return _imePrezime; }
	virtual void PredstaviSe() = 0;
};

class Ucenik :public Polaznik {
	Kolekcija<Predmet, Aktivnost, 16>* _aktivnosti;
public:
	Ucenik() :Polaznik("--", "--") {
		_aktivnosti = nullptr;
	}
	Ucenik(const char* imePrezime, string brojTelefona) :Polaznik(imePrezime, brojTelefona)
	{
		_aktivnosti = nullptr;
	}
	~Ucenik() { delete _aktivnosti; _aktivnosti = nullptr; }

	Ucenik(const Ucenik& obj) :Polaznik(obj)
	{
		if (obj._aktivnosti == nullptr)
		{
			_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>;
		}
		else
			_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>(*obj._aktivnosti);

	}

	float prosjecna() {
		float prosjek = 0;

		for (size_t i = 0; i < _aktivnosti->GetTrenutno(); i++)
		{
			prosjek += _aktivnosti->GetElement2(i).GetOcjenu();
		}
		return prosjek /= (float)_aktivnosti->GetTrenutno();
	}

	Ucenik& operator=(const Ucenik& obj)
	{
		(Polaznik&)(*this) = obj;
		if (obj._aktivnosti == nullptr)
		{
			_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>;
		}
		else
			_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>(*obj._aktivnosti);
		return *this;
	}
	Kolekcija<Predmet, Aktivnost, 16>& GetAktivnosti() { return *_aktivnosti; };
	void PredstaviSe() {

	}
	friend ostream& operator<<(ostream& COUT, Ucenik& n)
	{
		//COUT << "PODACI O UCENIKU I NJEGOVIM AKTIVNOSTIMA....IMPLEMENTIRATI" << endl;
		COUT << "Ime i prezime : " << n._imePrezime << endl;
		COUT << "Broj telefona: " << n._brojTelefona << endl;
		COUT << "Aktivnosti: (" << n._aktivnosti->GetTrenutno() << ")" << endl;
		for (size_t i = 0; i < n._aktivnosti->GetTrenutno(); i++)
		{
			COUT << i + 1 << ". " << predmet[n._aktivnosti->GetElement1(i)] << " , " << n._aktivnosti->GetElement2(i) << endl;
		}

		return COUT;
	}
};


class Skola {
	char* _naziv;
	vector<Ucenik> _ucenici;
public:
	Skola(const char* naziv = nullptr) {
		_naziv = AlocirajNizKaraktera(naziv);
	}
	~Skola() {
		delete[] _naziv; _naziv = nullptr;
	}

	Skola(const Skola& obj)
	{
		_naziv = AlocirajNizKaraktera(obj._naziv);
		for (size_t i = 0; i < obj._ucenici.size(); i++)
		{
			_ucenici[i] = obj._ucenici[i];
		}
	}

	Skola& operator=(const Skola& obj)
	{
		_naziv = AlocirajNizKaraktera(obj._naziv);
		for (size_t i = 0; i < obj._ucenici.size(); i++)
		{
			_ucenici[i] = obj._ucenici[i];
		}
		return *this;
	}


	char* GetNaziv()const { return _naziv; }
	vector<Ucenik>& GetUcenici() { return _ucenici; };

	void operator()(const char* imePrezime, string brojTelefona) {
		for (size_t i = 0; i < _ucenici.size(); i++)
		{
			if (strcmp(imePrezime, _ucenici[i].GetImePrezime()) == 0 || brojTelefona == _ucenici[i].GetTelefon())
			{
				throw exception("vec postoji \n");
			}
		}
		Ucenik temp(imePrezime, brojTelefona);
		_ucenici.push_back(temp);
	}

	//na nivou razreda max 4 aktivnosti
	//ne smiju se ponavljati aktivnosti na nivou razreda iz istog predmeta
	//ukoliko je uspjesna aktivnost(ocjena veca od 1) ucenika na nivou razreda i posjeduje validan broj telefona salje mu se sms sa sadrzajem  "Uspjesno ste okoncali aktivnosti u okviru X razreda sa prosjecnom ocjenom X.X"
	bool DodajAktivnost(const char* imeUcenika, const Predmet& p, const Aktivnost& aktivnost) {
		bool flag;
		float prosjecna;
		for (vector<Ucenik>::iterator ucenik = _ucenici.begin(); ucenik != _ucenici.end(); ucenik++)
		{
			if (strcmp(ucenik->GetImePrezime(), imeUcenika) == 0)
			{
				flag = false;
				if (ucenik->GetAktivnosti().GetTrenutno() >= 4)
				{
					cout << "Postoje vec 4 aktivnosti" << endl;
					return false;
				}
				for (size_t i = 0; i < ucenik->GetAktivnosti().GetTrenutno(); i++)
				{
					if (ucenik->GetAktivnosti().GetElement1(i) == p && ucenik->GetAktivnosti().GetElement2(i).GetRazred() == aktivnost.GetRazred())
					{
						cout << "Vec postoji aktivnost na ovom predmetu" << endl;
						return false;
					}
					if (ucenik->GetAktivnosti().GetElement2(i) == aktivnost)
					{
						cout << "Postoji ista aktivnost" << endl;
						return false;
					}
				}
				ucenik->GetAktivnosti().AddElement(p, aktivnost);
				for (size_t i = 0; i < ucenik->GetAktivnosti().GetTrenutno(); i++)
				{
					if (ucenik->GetAktivnosti().GetElement2(i).GetOcjenu() >= 1 && strcmp(ucenik->GetTelefon().c_str(), not_set) != 0)
					{
						flag = true;
					}
				}
				if (flag && ucenik->GetAktivnosti().GetTrenutno() == 4)
				{
					thread t([&]() {
						m.lock();
						cout << "Postovani " << ucenik->GetImePrezime() << endl;
						cout << " Uspjesno ste okoncali aktivnosti u okviru " << aktivnost.GetRazred() << ". razreda sa prosjecnom ocjenom " << ucenik->prosjecna() << endl;

						m.unlock();
						});
					t.join();
				}
				return true;
			}
		}


		return false;
	}

	pair<Polaznik*, float> GetNajboljegUcenika() {
		int index = -1;
		float prosjecna;
		for (size_t i = 0; i < _ucenici.size(); i++)
		{
			if (_ucenici[i].GetAktivnosti().GetTrenutno() > 0 && _ucenici[i + 1].GetAktivnosti().GetTrenutno() > 0)
			{
				if (_ucenici[i].prosjecna() > _ucenici[i + 1].prosjecna())
				{
					index = i;
					prosjecna = _ucenici[i].prosjecna();
				}
				else
				{
					index = i + 1;
					prosjecna = _ucenici[i + 1].prosjecna();
				}
			}
		}
		if (index != -1)
		{
			Polaznik* tempPolaznik = new Ucenik(_ucenici[index].GetImePrezime(), _ucenici[index].GetTelefon());
			return make_pair(tempPolaznik, prosjecna);
		}
		else
			return make_pair(new Ucenik("----", "xxxxxx"), 0);

	}
	friend ostream& operator<<(ostream& COUT, Skola& obj) {
		COUT << "Skola: " << obj._naziv << endl;
		COUT << "Ucenici: " << endl;
		for (size_t i = 0; i < obj._ucenici.size(); i++)
			COUT << obj._ucenici[i] << endl;
		return COUT;
	}

	bool SpasiUFajl(const char* nazivFajla, bool append = false) {
		if (append)
		{
			ofstream upis(nazivFajla, ios::app);
			if (upis.fail())
			{
				return false;
			}
			upis << "Skola: " << _naziv << endl << "Ucenici: " << endl;
			for (size_t i = 0; i < _ucenici.size(); i++)
				upis << _ucenici[i] << endl;
			upis.close();
			return true;
		}
		else {
			ofstream upis(nazivFajla);
			if (upis.fail())
			{
				return false;
			}
			upis << "Skola: " << _naziv << endl << "Ucenici: " << endl;
			for (size_t i = 0; i < _ucenici.size(); i++)
				upis << _ucenici[i] << endl;
			upis.close();
			return true;
		}
	}


};

int main() {

#pragma region Kolekcija
	Kolekcija<int, int, 10> kolekcija1(DESC, false);
	try {
		kolekcija1.AddElement(1, 2);
		//dupliranje elemenata nije dozvoljeno
		kolekcija1.AddElement(1, 2);
	}
	catch (exception & ex) {
		cout << ex.what();
	}

	cout << endl;
	cout << endl;

	/*nakon svakog dodavanja, elemente sortirati prema T1 i vrijednosti atributa _sortiranje*/
	for (size_t i = 0; i < kolekcija1.GetMax() - 1; i++) {
		kolekcija1.AddElement(rand(), rand());
		/*cout << kolekcija1 << endl;
		kolekcija1.sort();
		cout << "sort" << endl;
		cout << kolekcija1 << endl;*/
	}
	cout << kolekcija1 << endl;



	try {
		//prekoracen maksimalan broj elemenata
		kolekcija1.AddElement(rand(), rand());
	}
	catch (exception & ex) {
		cout << ex.what();
	}
	cout << kolekcija1 << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	Kolekcija<int, int, 10> kolekcija2(kolekcija1);
	cout << kolekcija2 << endl;

	Kolekcija<int, int, 10> kolekcija3;
	kolekcija3 = kolekcija1;
	cout << kolekcija3 << endl;

	cout << endl; cout << endl;
	cout << endl;
	cout << endl;
	cout << endl;

#pragma endregion

	Skola gimnazijaMostar("GIMNAZIJA MOSTAR");
	//dodaje novog ucenika u skolu
	gimnazijaMostar("Jasmin Azemovic", "+387(61)111-222");
	gimnazijaMostar("Adel Handzic", "+387(61)333-444");


	/*
	koristeci regex, osigurati sljedeci format za broj telefona: +387(6X)XXX-XXX ili +387 6X XXX-XXX
	onemoguciti pojavljivanje samo jedne zagrade, a ukoliko format nije adekvatna koristiti vrijednost not_set
	*/
	gimnazijaMostar("Telefon NotValidFormat", "387 61)333-444");
	cout << gimnazijaMostar;

	try
	{
		/*onemoguciti dodavanje ucenika sa istim imenom i prezimenom ili brojem telefona*/
		gimnazijaMostar("Adel Handzic", "+387(61)333-444");
	}
	catch (exception & ex)
	{
		cout << ex.what() << endl;
	}

	cout << endl;
	cout << endl;
	cout << endl;
	cout << endl;

	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", MATEMATIKA, Aktivnost(I, 4, "Priprema za takmicenje iz Matematije koje se odrzava u Konjicu 07.02.2019")))
		cout << "Aktivnost Priprema za takmicenje iz Matematije koje se odrzava u Konjicu 07.02.2019 uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	/*na nivou svakog razreda se mogu evidentirati maksimalno 4 aktivnosti, a takodjer, na nivou razreda se ne smiju ponavljati aktivnosti iz istog predmeta*/
	if (!gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", MATEMATIKA, Aktivnost(I, 4, "Aktivnosti iz matematike")))
		cout << "Aktivnost Aktivnosti iz matematike nije uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", HEMIJA, Aktivnost(I, 5, "Priprema otopina za vjezbe iz predmeta Hemija")))
		cout << "Aktivnost Priprema otopina za vjezbe iz predmeta Hemija uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", FIZIKA, Aktivnost(I, 2, "Analiza stepena apsorpcije materijala ")))
		cout << "Aktivnost Analiza stepena apsorpcije materijala  uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	/*u slucaju da je ucenik uspjesno (ocjenom vecom od 1) realizovao aktivnosti na nivou odredjenog razreda, te posjeduje validan broj telefona,
	u okviru zasebnog thread-a se salje SMS sa sadrzajem "Uspjesno ste okoncali aktivnosti u okviru X razreda sa prosjecnom ocjenom X.X"*/
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", GEOGRAFIJA, Aktivnost(I, 4, "Izrada 5 reljefa Mostara")))
		cout << "Aktivnost Izrada 5 reljefa Mostara uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;

	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", FIZIKA, Aktivnost(I, 4, "Izrada 5 reljefa Mostara")))
		cout << "Aktivnost Izrada 5 reljefa Mostara uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;
	if (gimnazijaMostar.DodajAktivnost("Adel Handzic", MATEMATIKA, Aktivnost(I, 5, "Izrada skripte na temu integralni racun")))
		cout << "Aktivnost Izrada skripte na temu integralni racun uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl; if (gimnazijaMostar.DodajAktivnost("Adel Handzic", HEMIJA, Aktivnost(I, 2, "neka aktivnost")))
		cout << "Aktivnost Izrada skripte na temu integralni racun uspjesno dodana" << endl;
	cout << endl;
	cout << endl;
	cout << endl;

	//ispisuje sve ucenike i njihove aktivnosti
	cout << gimnazijaMostar << endl;


	pair<Polaznik*, float> par = gimnazijaMostar.GetNajboljegUcenika();
	cout << "Najbolji ucenik je " << par.first->GetImePrezime() << " sa prosjekom " << par.second << endl;

	/*U fajl (npr. Gimnazija.txt) upisati podatke (podatke upisati kao obicni tekst) o skoli i svim ucenicima.
	Nakon upisa, potrebno je ispisati sadrzaj fajla. Parametar tipa bool oznacava da li ce ranije dodani sadrzaj fajla prethodno biti pobrisan*/

	if (gimnazijaMostar.SpasiUFajl("Gimnazija.txt"))
		cout << "Podaci o ucenicima uspjesno pohranjeni u fajl" << endl;
	if (gimnazijaMostar.SpasiUFajl("Gimnazija.txt", true))
		cout << "Podaci o ucenicima uspjesno pohranjeni u fajl" << endl;

	//cin.get();
	system("pause");
	return 0;
}
