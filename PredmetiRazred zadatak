#include<iostream>
#include<string>
#include<vector>
#include<string>    
#include<sstream>
#include<regex>

using namespace std;
const char* crt = "\n---------------------------------------\n";

enum Predmeti { Matematika, Historija, Geografia, Hemija, Biologija, Engleski, Muzicko, Fizicko };
enum Razredi { I1, I2, I3, II1, II2, II3, III1, III2, III3, IV1, IV2, IV3 };
const char* ispisPredmeti[] = { "Matematika", "Historija", "Geografia", "Hemija", "Biologija", "Engleski", "Muzicko", "Fizicko" };
const char* ispisRazredi[] = { "I1", "I2", "I3", "II1", "II2", "II3", "III1", "III2", "III3", "IV1", "IV2", "IV3" };

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	~Kolekcija()
	{
		delete[]_elementi1;
		delete[]_elementi2;
	}
	Kolekcija(const Kolekcija& obj)
	{
		_trenutno = obj._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (size_t i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}
	Kolekcija& operator=(const Kolekcija& obj)
	{
		if (&obj==this)
		{
			return *this;
		}
		_trenutno = obj._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (size_t i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
		return *this;
	}
	void addElement(const T1& element1, const T2& element2)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (size_t i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		_elementi1[_trenutno] = element1;
		_elementi2[_trenutno] = element2;
		_trenutno++;
	}
	friend ostream& operator<<(ostream& cout,const  Kolekcija& obj)
	{
		for (size_t i = 0; i < obj.getTrenutno(); i++)
		{
			cout << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		}
		return cout;
	}
	int getTrenutno()const {
		return _trenutno;
	}
	T1 getElement1(int i)const { return _elementi1[i]; }
	T2 getElement2(int i)const { return _elementi2[i]; }
	void removeElement(int index)
	{
		if (index<0 || index>=_trenutno)
		{
			return;
		}
		int j = 0;
		T1* temp1 = new T1[_trenutno -1];
		T2* temp2 = new T2[_trenutno -1];
		for (size_t i = 0; i < _trenutno; i++)
		{
			if (j==index)
			{
				j++;
			}
			temp1[i] = _elementi1[j];
			temp2[i] = _elementi2[j];
			j++;
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutno--;
	}
};
class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}
	Datum& operator=(const Datum& obj) {
		if (&obj==this)
		{
			return *this;
		}
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
			return *this;
	}

	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}


	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
};
bool ProvjeriValidnostBrojaTelefona(string telefon) {//globalna funkcija
	/*
	broj telefona treba biti u formatu: +387(61)-222-333
	*/
	regex pravilo("\\+\\d{3}\\(\\d{2}\\)\\-\\d{3}\\-\\d{3}");
	return regex_match(telefon, pravilo);
}
class Osoba {
protected:
	char* _imePrezime;
	Datum* _datumRodjenja;
	string _brojTelefona;
public:
	Osoba(const char* imePrezime, Datum datum) {
		_imePrezime = new char[strlen(imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(imePrezime) + 1, imePrezime);
		_datumRodjenja = new Datum(datum);
		_brojTelefona = "---";

	}
	Osoba(const Osoba& obj) :_brojTelefona(obj._brojTelefona) {
		_imePrezime = new char[strlen(obj._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(obj._imePrezime) + 1, obj._imePrezime);
		_datumRodjenja = new Datum(*obj._datumRodjenja);
	}
	Osoba& operator=(const Osoba& obj) {
		if (&obj==this)
		{
			return *this;
		}
		_brojTelefona = obj._brojTelefona;
		_imePrezime = new char[strlen(obj._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(obj._imePrezime) + 1, obj._imePrezime);
		_datumRodjenja = new Datum(*obj._datumRodjenja);
		return *this;
	}
	~Osoba() { delete[]_imePrezime; delete _datumRodjenja; }
	const char* getImePrezime() {
		return _imePrezime;
	}
	bool setBrojTelefona(string brojTelefona) {
		if (ProvjeriValidnostBrojaTelefona(brojTelefona)) {
			_brojTelefona = brojTelefona;
			return true;
		}
		return false;
	}
	friend ostream& operator<<(ostream& cout, const Osoba& obj)
	{
		cout << "Ime i prezime: " << obj._imePrezime << endl;
		cout << "Datum rodjenja: " << *obj._datumRodjenja << endl;
		cout << "Broj telefona: " << obj._brojTelefona << endl;
		return cout;
	}
};
class Nastavnik :public Osoba {
	Kolekcija<Predmeti, Razredi>* _predmetiRazredi;
public:
	Nastavnik(const char* ime, Datum datumRodjenja) :Osoba(ime, datumRodjenja)
	{
		_predmetiRazredi = nullptr;
	}
	~Nastavnik()
	{
			delete _predmetiRazredi;
			_predmetiRazredi = nullptr;
	}
	Nastavnik(const Nastavnik& obj):Osoba(obj)
	{
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>(*obj._predmetiRazredi);
	}
	Nastavnik& operator=(const Nastavnik& obj)
	{
		if (&obj==this)
		{
			return *this;
		}
		(Osoba&)(*this) = obj;
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>(*obj._predmetiRazredi);
		return *this;
	}

	Kolekcija<Predmeti, Razredi>& getPredmetiRazredi()const {
		return *_predmetiRazredi;
	}

	bool AddPredmetRazred(const Predmeti& predmet,const Razredi& razred)
	{
		if (_predmetiRazredi==nullptr)
		{
			_predmetiRazredi = new Kolekcija<Predmeti, Razredi>;
		}
		
		for (size_t i = 0; i < _predmetiRazredi->getTrenutno(); i++)
		{
			if (_predmetiRazredi->getElement1(i)==predmet)
			{
				if (_predmetiRazredi->getElement2(i)==razred)
				{
					cout << "Nije moguce dodati isti predmet u istom razredu" << endl;
					return false;
				}
			}
		}
		_predmetiRazredi->addElement(predmet, razred);
		return true;
	}
	bool RemovePredmetRazred(const Predmeti& predmet) {
		for (size_t i = 0; i < _predmetiRazredi->getTrenutno(); i++)
		{
			if (_predmetiRazredi->getElement1(i)==predmet)
			{
				_predmetiRazredi->removeElement(i);
				cout << "Predmet uspjesno uklonjen" << endl;
				return true;
			}
		}
		cout << "Predmet nije pronadjen" << endl;
		return false;
	}
	bool operator==(const Nastavnik& obj)
	{
		return strcmp(_imePrezime, obj._imePrezime) == 0 && _brojTelefona == obj._brojTelefona;
	}
	friend ostream& operator<<(ostream& cout, const Nastavnik& obj)
	{
		//cout << Osoba::_brojTelefona << endl;
		cout << *obj._predmetiRazredi << endl;
	}
};
class Ucenik : public Osoba {
	int _brojUDnevniku;
	Razredi _razred;
	vector<Nastavnik*> _nastavnici;
	Kolekcija<Predmeti, int> _predmetiOcjene;
public:
	Ucenik(const char* imePrezime,Datum datum,int brojDnevnik,Razredi razred):Osoba(imePrezime,datum)
	{
		_brojUDnevniku = brojDnevnik;
		_razred = razred;
	}
	bool AddNastavnik(const Nastavnik& nastavnik)
	{
		for (size_t i = 0; i < _nastavnici.size(); i++)
		{
			if (*_nastavnici[i]==nastavnik)
			{
				cout << "Nastavnik vec dodan" << endl;
				return false;
			}
		}
		for (size_t i = 0; i < nastavnik.getPredmetiRazredi().getTrenutno(); i++)
		{
			if (nastavnik.getPredmetiRazredi().getElement2(i) == _razred)
			{
				_nastavnici.push_back(new Nastavnik(nastavnik));
				cout << "Nastavnik uspjesno dodan" << endl;
				return true;
			}
		}
		cout << "Nastavnik ne predaje nista u razredu ucenika" << endl;
		return false;
	}
	bool AddPredmetOcjenu(const Predmeti& predmet, int ocjena)
	{
		bool flag = false;
		for (size_t i = 0; i < _nastavnici.size(); i++)
		{
			if (_nastavnici[i]->getPredmetiRazredi().getElement1(i)==predmet)
			{
				flag = true;
			}
		}
		if (flag)
		{
			_predmetiOcjene.addElement(predmet, ocjena);
			cout << "Ocjena uspjesnoo dodana" << endl;
			return true;
		}
		else
		{
			cout << "Ucenik nema profesora koji predaje taj predmet" << endl;
			return false;
		}
	}
	vector<Nastavnik*>& getNastavnici() {
		return _nastavnici;
	}
	Kolekcija<Predmeti, int>& getPredmetiOcjene() { return _predmetiOcjene; }
	float GetProsjekByNastavnik(const char* imeNastavnika) {
		float prosjek = 0;
		for (size_t i = 0; i < _nastavnici.size(); i++)
		{
			if (strcmp(_nastavnici[i]->getImePrezime(), imeNastavnika) == 0)
			{
				for (size_t j = 0; j < _predmetiOcjene.getTrenutno(); j++)
				{
					prosjek += _predmetiOcjene.getElement2(j);
				}
				return prosjek / float(_predmetiOcjene.getTrenutno());
			}	
		}
		cout << "Nastavnik ne postoji" << endl;
		return 0;
	}
	friend ostream& operator<<(ostream& cout, const Ucenik& obj)
	{
		cout << static_cast<Osoba>(obj) << endl;
		cout << "Broj u dnevniku: " << obj._brojUDnevniku << endl;
		cout << "Razred: " << ispisRazredi[obj._razred]<< endl;
		cout << "Predmeti i ocjene: " << endl;
		for (size_t i = 0; i < obj._predmetiOcjene.getTrenutno(); i++)
		{
			cout << ispisPredmeti[obj._predmetiOcjene.getElement1(i)] << "  " << obj._predmetiOcjene.getElement2(i) << endl;
		}
		return cout;
	}

};


void main() {

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU CODE_.TXT
	5. NAZIV I LISTA PARAMETARA FUNKCIJA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U.
	6. NIJE POTREBNO BACATI IZUZETKE. SVE FUNKCIJE VRACAJU TRUE ILI FALSE
	****************************************************************************/

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion
#pragma region testiranjekolekcije
	Kolekcija<int, int> kolekcija1;
	int brojelemenata = 15;
	for (size_t i = 0; i < brojelemenata; i++)
		kolekcija1.addElement(i, i);
	cout << kolekcija1 << endl;
	kolekcija1.removeElement(0);//uklanja element na osnovu lokacije
	cout << kolekcija1.getElement1(0) << " " << kolekcija1.getElement2(0) << endl;
	cout << kolekcija1 << endl;
	Kolekcija<int, int> kolekcija2;
	kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt;
	if (kolekcija1.getTrenutno() == kolekcija2.getTrenutno())
		cout << "isti broj elemenata" << endl;
	Kolekcija<int, int> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion
#pragma region TestiranjeNastavnika
	Nastavnik jasmin("Jasmin Azemovic", Datum(15, 2, 1980));
	Nastavnik adel("Adel Handzic", Datum(15, 10, 1981));
	/*NASTAVNIK MOZE PREDAVATI ISTI PREDMET, ALI TO MORA BITI U RAZLICITIM ODJELJENJIMA I NAJVISE U DVA RAZREDA (NA DVIJE RAZLICITE GODINE)*/
	if (jasmin.AddPredmetRazred(Matematika, I1))
		cout << "Predmet mat dodan" << endl;
	
	if (jasmin.AddPredmetRazred(Historija, I1))
		cout << "Predmet hist dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I1))
		cout << "Predmet geo dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I2))
		cout << "Predmet geo2 dodan" << endl;

	if (adel.AddPredmetRazred(Historija, III1))
		cout << "Predmet hist dodan" << endl;

	//zakomentirano radi potrebe testiranja u regionu testiranjeUcenika,kod radi normalno
	/*if (adel.RemovePredmetRazred(Historija))
		cout << "Predmet uklonjen!" << endl;*/

	Nastavnik goran(adel);
	if (goran == adel)
		cout << "Nastavnici identicni" << endl;
	goran = jasmin;
	if (goran == jasmin)
		cout << "Nastavnici identicni" << endl;

	Kolekcija<Predmeti, Razredi> & predmetiRazredi = jasmin.getPredmetiRazredi();

	if (!jasmin.setBrojTelefona("+38761111222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (!jasmin.setBrojTelefona("+387-61-111-222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (jasmin.setBrojTelefona("+387(61)-111-222"))
		cout << "Broj telefona uspjesno dodan!" << endl;
	//cout << jasmin << endl;
#pragma endregion

#pragma region TestiranjeUcenika
	Ucenik denis("Denis Music", Datum(8, 10, 1990), 3, III1);
	Ucenik elmin("Elmin Sudic", Datum(15, 6, 1993), 1, I1);
	Ucenik adil("Adil Joldic", Datum(13, 8, 1992), 2, II1);

	cout << crt << endl;

	/*VODITI RACUNA DA SE DODAJU REFERENCE NA NASTAVNIKE KAKO BI SVI UCENICI DIJELILI ISTE INFORMACIJE O NASTAVNICIMA U SLUCAJU DA SE NASTAVNIKU DODA NEKI PREDMET*/
	/*ZA USPJESNO DODAVANJE, NASTAVNIK MORA POSJEDOVATI (PREDAVATI) NAJMANJE JEDAN PREDMET U TOM RAZREDU */
	if (denis.AddNastavnik(jasmin))
		cout << "Nastavnik uspjesno dodan" << endl;
	/*ONEMOGUCITI DODAVANJE ISTIH NASTAVNIKA; POJAM ISTI PODRAZUMIJEVA IDENTICNE VRIJEDNOSTI SVIH ATRIBUTA*/
	if (denis.AddNastavnik(adel))
		cout << "Nastavnik uspjesno dodan" << endl;

	cout << crt << endl;

	/*DA BI SE DODALA OCJENA ZA ODREDJENI PREDMET UCENIK MORA POSJEDOVATI NASTAVNIKA KOJI PREDAJE TAJ PREDMET*/
	if (denis.AddPredmetOcjenu(Matematika, 3))
		cout << "Ocjena uspjesno dodana" << endl;
	if (denis.AddPredmetOcjenu(Historija, 4))
		cout << "Ocjena uspjesno dodana" << endl;
	//test prosjecne ocjene
	/*if (denis.AddPredmetOcjenu(Historija, 3))
		cout << "Ocjena uspjesno dodana" << endl;*/

	cout << crt << endl;

	vector<Nastavnik*> & nastavnici = denis.getNastavnici();
	cout << "Ucenik Denis ima dodijeljena " << nastavnici.size() << " nastavnika" << endl;

	cout << crt << endl;
	

	Kolekcija<Predmeti, int> & uspjeh = denis.getPredmetiOcjene();
	cout << "Denis ima " << uspjeh.getTrenutno() << " polozenih predmeta" << endl;
	cout << "Prosjecna ocjena kod nastavnika Jasmin Azemovic je " << denis.GetProsjekByNastavnik("Jasmin Azemovic") << endl;
	cout << "Prosjecna ocjena kod nastavnika Adel Handzic je " << denis.GetProsjekByNastavnik("Adel Handzic") << endl;

	cout << crt << endl;
	cout << crt << endl;

	Ucenik denis2(denis);
	cout << denis << endl;
	cout << denis2 << endl;

#pragma endregion
	system("pause");
}

