#include <iostream>
#include <vector>
#include <string>
#include <regex>
#include <thread>
#include <mutex>
#include <chrono>
using namespace std;

mutex m;
const char* crt = "\n---------------------------------------\n";

class DatumVrijeme {
	int* _dan, * _mjesec, * _godina, * _sati, * _minuti;
public:
	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);

	}
	DatumVrijeme(const DatumVrijeme& obj)
	{
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
		_sati = new int(*obj._sati);
		_minuti = new int(*obj._minuti);
	}
	DatumVrijeme& operator=(const DatumVrijeme& obj)
	{
		if (&obj==this)
		{
			return *this;
		}
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
		_sati = new int(*obj._sati);
		_minuti = new int(*obj._minuti);
			return *this;
	}
	bool operator==(DatumVrijeme datum) {
		return *_dan == *datum._dan && *_mjesec == *datum._mjesec && *_godina == *datum._godina && *_sati == *datum._sati;
	}
	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;

	}
	friend ostream& operator<< (ostream& COUT, DatumVrijeme& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti;
		return COUT;
	}
};

template<class T1, class T2 = int>
class FITKolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	FITKolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	~FITKolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}
	FITKolekcija(const FITKolekcija& obj)
	{
		_trenutno = obj._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (size_t i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}
	T1* GetT1() { return _elementi1; }
	T2* GetT2() { return _elementi2; }
	int GetTrenutno() { return _trenutno; }
	void Dodaj(const T1& element1, const T2& element2)
	{
		//dio koda zaduzen ukoliko je dupliciranje elemenata zabranjeno
		/*for (size_t i = 0; i <_trenutno ; i++)
		{
			if (_elementi1[i]==element1 && _elementi2[i]==element2)
			{
				cout << "Elementi vec postoje" << endl;
				return ;
			}
		}*/
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (size_t i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		_elementi1[_trenutno] = element1;
		_elementi2[_trenutno] = element2;
		_trenutno++;
	}
	void Ukloni(int index) {
		if (index>=0 && index<_trenutno)
		{
			T1* temp1 = new T1[_trenutno - 1];
			T2* temp2 = new T2[_trenutno - 1];
			int j = 0;
			for (size_t i = 0; i < _trenutno; i++)
			{
				if (i==index)
				{
					j++;
				}
				temp1[i] = _elementi1[j];
				temp2[i] = _elementi2[j];
				j++;
			}
			delete[]_elementi1;
			delete[]_elementi2;
			_elementi1 = temp1;
			_elementi2 = temp2;
			_trenutno--;
		}
	}
	void Sortiraj()
	{
		bool flag = true;
		while (flag)
		{
			flag = false;
			for (size_t i = 0; i < _trenutno-1; i++)
			{
				if (_elementi1[i]>_elementi1[i+1])
				{
					swap(_elementi1[i], _elementi1[i + 1]);
					swap(_elementi2[i], _elementi2[i + 1]);
					flag = true;
				}
			}
		}
	}
	void DodajNaLokaciju(const T1& element1, const T2& element2, int index)
	{
		if (index>=0 && index<_trenutno)
		{
			_elementi1[index] = element1;
			_elementi2[index] = element2;
			return;
		}
		else
		{
			cout << "Nepostojeca lokacija" << endl;
		}
	}
	FITKolekcija<T1, T2>* GetJedinstveni() {
		FITKolekcija<T1, T2>* temp = new FITKolekcija<T1, T2>[_trenutno];
		bool flag = false;
		for (size_t i = 0; i < _trenutno; i++)
		{
			for (size_t j = 0; j < _trenutno; j++)
			{
				if (i!=j)
				{
					if (_elementi1[i] == _elementi1[j] && _elementi2[i]==_elementi2[j])
					{
						flag = true;
					}
				}
			}
			if (!flag)
			{
				temp->Dodaj(_elementi1[i], _elementi2[i]);
			}
		}
		return temp; 
	}
	friend ostream& operator<< (ostream& COUT, FITKolekcija& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj._elementi1[i] << " " << obj._elementi2[i] << endl;
		return COUT;
	}
};

enum vrstaDokumenta { PDF, DOC, TXT, HTML };

class Dokument {
	vrstaDokumenta _vrsta;
	string _naziv;
	string _sadrzaj;
	int _brojStranica;
public:
	Dokument() { _brojStranica = 0; }
	Dokument(vrstaDokumenta vrsta, string naziv) {
		_naziv = naziv; _vrsta = vrsta; _brojStranica = 0;
	}
	string GetNaziv() { return _naziv; };
	string GetSadrzaj()const { return _sadrzaj; };
	vrstaDokumenta GetVrsta() { return _vrsta; };
	void UvecajBrojStranica() { _brojStranica++; }
	int GetBrojStranica() { return _brojStranica; }
	bool nazivValidan()
	{
		regex pravilo("\\w{5,15}\\.(doc|txt|pdf)");
		return regex_match(_naziv, pravilo);
	}
	bool sadrziZabranjeneRijeci(string rijec)
	{
		regex pravilo(rijec);
		return regex_search(_sadrzaj, pravilo);
	}
	void DodajSadrzaj(string noviSadrzaj)
	{
		int temp = strlen(_sadrzaj.c_str())/30;
		_sadrzaj += noviSadrzaj;
		if (strlen(_sadrzaj.c_str()) / 30 > temp)
		{
			this->UvecajBrojStranica();
		}
	}
	
	friend ostream& operator<<(ostream& COUT, Dokument& obj) {
		COUT << obj._naziv << "." << obj._vrsta << " (" << obj._brojStranica << ")\n" << obj._sadrzaj << endl;
		return COUT;
	}
};
class Uredjaj {
protected:
	char* _proizvodjac;
	char* _model;
public:
	Uredjaj(const char* proizvodjac,const char* model) {
		int vel = strlen(proizvodjac) + 1;
		_proizvodjac = new char[vel];
		strcpy_s(_proizvodjac, vel, proizvodjac);
		vel = strlen(model) + 1;
		_model = new char[vel];
		strcpy_s(_model, vel, model);
	}
	Uredjaj(const Uredjaj& obj)
	{
		int vel = strlen(obj._proizvodjac) + 1;
		_proizvodjac = new char[vel];
		strcpy_s(_proizvodjac, vel, obj._proizvodjac);
		vel = strlen(obj._model) + 1;
		_model = new char[vel];
		strcpy_s(_model, vel, obj._model);
	}
	~Uredjaj() {
		delete[] _proizvodjac; _proizvodjac = nullptr;
		delete[] _model; _model = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Uredjaj& obj) {
		COUT << obj._proizvodjac << "." << obj._model << endl;
		return COUT;
	}
};
class Printer:public Uredjaj {
	FITKolekcija<DatumVrijeme, Dokument> _printaniDokumenti;
	vector<string> _zabranjeneRijeci;
public:
	Printer(const char* proizvodjac, const char* model) :Uredjaj(proizvodjac, model)
	{};
	Printer(Printer& obj):Uredjaj(obj)
	{
		_printaniDokumenti = obj._printaniDokumenti;
		for (size_t i = 0; i < obj.GetZabranjeneRijeci().size(); i++)
		{
			_zabranjeneRijeci.push_back(obj.GetZabranjeneRijeci()[i]);
		}
	}
	FITKolekcija<DatumVrijeme, Dokument>& GetPrintaniDokumenti() { return _printaniDokumenti; };
	void DodajZabranjenuRijec(string zabranjenaRijec)
	{
		for (vector<string>::iterator i = _zabranjeneRijeci.begin(); i != _zabranjeneRijeci.end(); i++)
		{
			if (*i==zabranjenaRijec)
			{
				cout << "Rijec vec zabranjena" << endl;
				return;
			}
		}
		_zabranjeneRijeci.push_back(zabranjenaRijec);
	}
	vector<string>&  GetZabranjeneRijeci() { return _zabranjeneRijeci; };
	void Printaj(const DatumVrijeme datumVrijeme,  Dokument dokument)
	{
		if (dokument.nazivValidan())
		{
			for (size_t i = 0; i < _zabranjeneRijeci.size(); i++)
			{
				if (dokument.sadrziZabranjeneRijeci(_zabranjeneRijeci[i]))
				{
					_printaniDokumenti.Dodaj(datumVrijeme, dokument);
					throw exception("Sadrzi zabranjene rijeci \n");
					return;
				}
			}
			_printaniDokumenti.Dodaj(datumVrijeme, dokument);
			thread print([dokument](){
				m.lock();
				this_thread::sleep_for(chrono::seconds(1));
				cout << crt << endl;
				cout << "::::PRINT::::" << endl;
				this_thread::sleep_for(chrono::seconds(1));
				cout << dokument.GetSadrzaj() << endl;
				this_thread::sleep_for(chrono::seconds(1));
				cout << "::::KRAJ PRINTA::::" << endl;
				this_thread::sleep_for(chrono::seconds(1));
				cout << crt << endl;
				m.unlock();
				});
			print.join();
			
			return;
		}
		else
		{
			throw exception("Naziv nije validan \n");
			_printaniDokumenti.Dodaj(datumVrijeme, dokument);
		}

	}
	float GetProsjecanBrojStranicaPoDatumu(DatumVrijeme datum)
	{
		int brojac=0;
		float temp = 0;
		for (size_t i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (_printaniDokumenti.GetT1()[i]==datum)
			{
				temp += _printaniDokumenti.GetT2()[i].GetBrojStranica();
				brojac++;
			}
		}
		return float(temp / (brojac));
	}

		//nedovrseno

	//string GetTopZabranjenuRijec() {
	//}

	/*void UkloniDokumente()
	{
		for (size_t i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (_printaniDokumenti.GetT2()[i].nazivValidan())
			{
				for (size_t i = 0; i < _zabranjeneRijeci.size(); i++)
				{
					if (_printaniDokumenti.GetT2()[i].sadrziZabranjeneRijeci(_zabranjeneRijeci[i]))
					{
						_printaniDokumenti.Ukloni(i);
					}
				}
			}
			else {
				_printaniDokumenti.Ukloni(i);
			}
		}

	}*/
};

void main()
{
	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
	****************************************************************************/

#pragma region TestiranjeDatumVrijeme
	DatumVrijeme danas(1, 2, 2017, 10, 15);
	DatumVrijeme sutra(danas);
	DatumVrijeme prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;

#pragma endregion
#pragma region FITKolekcija
	int v6 = 6, v13 = 13, v32 = 32, v63 = 63, v98 = 98, v109 = 109, v196 = 196;

	FITKolekcija<int, int> brojevi;
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v13, v32);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v63, v13);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v196, v6);

	cout << brojevi << crt;
	//SORTIRANJE ČLANOVA KOLEKCIJE SE VRŠI U RASTUĆEM REDOSLIJEDU NA OSNOVU VRIJEDNOSTI ELEMENTA TIPA T1
	brojevi.Sortiraj();
	cout << brojevi << crt;
	//BROJ 2 SE ODNOSI NA LOKACIJU/INDEKS UNUTAR LISTE NA KOJI JE POTREBNO DODATI NOVE ELEMENTE
	brojevi.DodajNaLokaciju(v109, v6, 2);
	cout << brojevi << crt;
	brojevi.Sortiraj();
	cout << brojevi << crt;
	/*METODA GetJedinstveni VRAĆA LISTU JEDINSTVENIH ELEMENATA TJ. ELEMENATA KOJI NE SADRŽE DUPLIKATE 
	(POJAM DUPLIKAT SE ODNOSI NA ISTE VRIJEDNOSTI ELEMENATA T1 I T2). ELEMENTI KOJI SE DUPLIRAJU SE U OVOJ LISTI TREBAJU POJAVITI SAMO JEDNOM.*/
	FITKolekcija<int, int>* jedinstveni = brojevi.GetJedinstveni();
	cout << *jedinstveni << crt;
	*jedinstveni = brojevi;
	cout << *jedinstveni << crt;

	Dokument ispitPRIII(DOC, "ispitPRIII.doc");
	//BROJ STRANICA DOKUMENTA SE AUTOMATSKI ODREĐUJE PRILIKOM DODAVANJA SADRŽAJA. 
	//ZA POTREBE ISPITA PRETPOSTAVLJAMO DA NA JEDNU STRANICU MOŽE STATI 30 ZNAKOVA UKLJUČUJUĆI I RAZMAKE
	ispitPRIII.DodajSadrzaj("NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO RE");
	cout << "Broj stranica -> " << ispitPRIII.GetBrojStranica() << endl;

	Dokument ispitBaze(DOC, "ispitBaze.doc");
	ispitBaze.DodajSadrzaj("PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT");
	cout << ispitBaze << endl;//ISPISUJE SVE DOSTUPNE PODATKE O DOKUMENTU

	Printer hp3200("HP", "3200");
	//PRINTER NEĆE DOZVOLITI PRINTANJE DOKUMENATA U ČIJEM SADRŽAJU SE NALAZI NEKA OD ZABRANJENIH RIJEČI
	hp3200.DodajZabranjenuRijec("RE");// :)
	hp3200.DodajZabranjenuRijec("RAT");
	hp3200.DodajZabranjenuRijec("UBITI");
	hp3200.DodajZabranjenuRijec("RE");// ONEMOGUĆITI PONAVLJANJE ZABRANJENIH RIJEČI, KORISTITI ITERATORE
	hp3200.DodajZabranjenuRijec("MRZITI");
	try
	{
		/*
		DA BI PRINTER ISPRINTAO NEKI DOKUMENT MORAJU BITI ZADOVOLJENA SLJEDEĆA PRAVILA:
		1. NAZIV DOKUMENTA MORA BITI U SLJEDEĆEM FORMATU npr: ispitPRIII.doc
		NAZIV DOKUMENTA MOŽE SADRŽAVATI SAMO SLOVA (NAJMANJE 5, NAJVIŠE 15), A EKSTENZIJA MOŽE
		BITI SAMO NEKA OD DOZVOLJENIH VRSTOMDOKUMENTA
		2. SADRŽAJ DOKUMENTA U SEBI NE SMIJE POSJEDOVATI NITI JEDNU ZABRANJENU RIJEČ
		UKOLIKO NEKI OD NAVEDENIH USLOVA NIJE ZADOVOLJEN FUNKCIJA TREBA DA BACI EXCEPTION SA
		ODGOVARAJUĆOM PORUKOM, ALI ĆE DOKUMENT BITI POHRANJEN U KOLEKCIJU _printaniDokumenti.
		UKOLIKO DOKUMENT ISPUNJAVA SVE USLOVE ZA PRINTANJE POTREBNO JE NA KONZOLU ISPISATI
		SADRŽAJ DOKUMENTA KOJI SE PRINTA
		*/

		//linija ispod zakomentarisana radi nastavka testiranja(kod funkcionise pravilno i pritom prekida izvrsavanje jer u dokumentu ispitPRIII postoji zabranjena rijec)
		//hp3200.Printaj(danas, ispitPRIII);

		hp3200.Printaj(danas, ispitBaze);

		/*
		IMPLEMENTIRATI PRINTANJE U ZASEBNIM NITIMA UZ KORIŠTENJE sleep_for FUNKCIJE
		VODITI RAČUNA O DIJELJENJU ZAJEDNIČKIH RESURSA
		*/

	}
	catch (exception & err)
	{
		cout << err.what() << endl;
	}

	//KOD POREĐENJA DATUMA PRINTANJA NIJE POTREBNO POREDITI MINUTE, SAMO DATUM I SATE
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp3200.GetProsjecanBrojStranicaPoDatumu(danas) << crt;
	
	//nedovrseno
	//cout << "Najcesce koristena zabranjena rijec je -> " << hp3200.GetTopZabranjenuRijec() << crt;

	Printer hp4000(hp3200);
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp4000.GetProsjecanBrojStranicaPoDatumu(danas) << crt;

	//nedovrseno
	//cout << "Najcesce koristena zabranjena rijec je -> " << hp4000.GetTopZabranjenuRijec() << crt;
	//hp4000.UkloniDokumente();//UKLANJA SVE DOKUMENTE KOJI NISU ZADOVOLJILI USLOVE ZA PRINTANJE
	//cout << hp4000 << crt;

#pragma endregion
	system("PAUSE");
}



